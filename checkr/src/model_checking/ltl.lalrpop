use std::str::FromStr;
use crate::model_checking::ltl_ast::LTL;
use crate::ast::*;

grammar;

pub LTL: LTL = {
    IffLTL,
}

IffLTL: LTL = {
    <l: IffLTL> "<->" <r: ImpliesLTL> => LTL::Iff(Box::new(l), Box::new(r)),
    ImpliesLTL,
}

ImpliesLTL: LTL = {
    <l: ImpliesLTL> "->" <r: OrLTL> => LTL::Implies(Box::new(l), Box::new(r)),
    OrLTL,
}

OrLTL: LTL = {
    <l: OrLTL> "||" <r: XorLTL> => LTL::Or(Box::new(l), Box::new(r)),
    XorLTL,
}

XorLTL: LTL = {
    <l: XorLTL> "^^" <r: AndLTL> => LTL::Xor(Box::new(l), Box::new(r)),
    AndLTL,
}

AndLTL: LTL = {
    <l: AndLTL> "&&" <r: UntilLTL> => LTL::And(Box::new(l), Box::new(r)),
    UntilLTL,
}

UntilLTL: LTL = {
    <l: UnaryLTL> "U" <r: UntilLTL> => LTL::Until(Box::new(l), Box::new(r)),
    UnaryLTL,
}

UnaryLTL: LTL = {
    "!" <UnaryLTL> => LTL::Not(Box::new(<>)),
    "()" <UnaryLTL> => LTL::Next(Box::new(<>)),
    "<>" <UnaryLTL> => LTL::Eventually(Box::new(<>)),
    "[]" <UnaryLTL> => LTL::Forever(Box::new(<>)),
    AtomicLTL,
}

AtomicLTL: LTL = {
    "true" => LTL::True,
    "false" => LTL::False,
    "{" <BExpr_> "}" => LTL::Atomic(<>),
    "(" <LTL> ")",
}


// Copied from gcl.lalrpop
#[inline]
Target: Target<Box<AExpr>> = {
    Variable => Target::Variable(<>),
    <arr:Array> "[" <idx:AExpr> "]" => Target::Array(arr, Box::new(idx)),
}
#[inline]
Variable: Variable = Var => Variable(<>);
#[inline]
Array: Array = Var => Array(<>);

AExpr_ = AExpr;
AExpr: AExpr = {
    #[precedence(level="1")]
    Int => AExpr::Number(<>),
    Target => AExpr::Reference(<>),
    Function<AExprBox> => AExpr::Function(<>),
    "-" <AExpr> => AExpr::Minus(Box::new(<>)),
    "(" <AExpr_> ")",

    #[precedence(level="2")] #[assoc(side="right")]
    <l:AExpr> "^" <r:AExpr> => AExpr::binary(l, AOp::Pow, r),

    #[precedence(level="3")] #[assoc(side="left")]
    <l:AExpr> "*" <r:AExpr> => AExpr::binary(l, AOp::Times, r),
    <l:AExpr> "/" <r:AExpr> => AExpr::binary(l, AOp::Divide, r),

    #[precedence(level="4")] #[assoc(side="left")]
    <l:AExpr> "+" <r:AExpr> => AExpr::binary(l, AOp::Plus, r),
    <l:AExpr> "-" <r:AExpr> => AExpr::binary(l, AOp::Minus, r),
};
AExprBox: Box<AExpr> = AExpr => Box::new(<>);

Function<X>: Function = {
    "division" "(" <X> "," <X> ")"  => Function::Division(<>),
    "min" "(" <X> "," <X> ")"       => Function::Min(<>),
    "max" "(" <X> "," <X> ")"       => Function::Max(<>),
    "count" "(" <Array> "," <X> ")"     => Function::Count(<>),
    "count" "(" <LArray> "," <X> ")"    => Function::LogicalCount(<>),
    "length" "(" <Array> ")"                => Function::Length(<>),
    "length" "(" <LArray> ")"               => Function::LogicalLength(<>),
    "fac" "(" <X> ")"                   => Function::Fac(<>),
    "fib" "(" <X> ")"                   => Function::Fib(<>),
};

pub BExpr: BExpr = {
    #[precedence(level="0")]
    <l:AExpr_> <op:RelOp> <r:AExpr_> => BExpr::Rel(l, op, r),
    "true" => BExpr::Bool(true),
    "false" => BExpr::Bool(false),
    "!" <BExpr> => BExpr::Not(Box::new(<>)),
    "(" <BExpr_> ")",

    #[precedence(level="1")] #[assoc(side="left")]
    <l:BExpr> "&" <r:BExpr> => BExpr::logic(l, LogicOp::Land, r),
    <l:BExpr> "&&" <r:BExpr> => BExpr::logic(l, LogicOp::And, r),

    #[precedence(level="2")] #[assoc(side="left")]
    <l:BExpr> "|" <r:BExpr> => BExpr::logic(l, LogicOp::Lor, r),
    <l:BExpr> "||" <r:BExpr> => BExpr::logic(l, LogicOp::Or, r),
};
BExpr_: BExpr = BExpr;

RelOp: RelOp = {
    "<" => RelOp::Lt,
    ">" => RelOp::Gt,
    "<=" => RelOp::Le,
    ">=" => RelOp::Ge,
    "=" => RelOp::Eq,
    "!=" => RelOp::Ne,
};

Var: String = r"[a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();
LogicalVar: String = r"_[a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

Int: Int = r"[0-9]+" => Int::from_str(<>).unwrap();

EAExpr_ = EAExpr;
EAExpr: AExpr = {
    #[precedence(level="1")]
    Int => AExpr::Number(<>),
    Target => AExpr::Reference(<>),
    LTarget => AExpr::Reference(<>),
    Function<EAExprBox> => AExpr::Function(<>),
    "-" <EAExpr> => AExpr::Minus(Box::new(<>)),
    "(" <EAExpr_> ")",

    #[precedence(level="2")] #[assoc(side="right")]
    <l:EAExpr> "^" <r:EAExpr> => AExpr::binary(l, AOp::Pow, r),

    #[precedence(level="3")] #[assoc(side="left")]
    <l:EAExpr> "*" <r:EAExpr> => AExpr::binary(l, AOp::Times, r),
    <l:EAExpr> "/" <r:EAExpr> => AExpr::binary(l, AOp::Divide, r),


    #[precedence(level="4")] #[assoc(side="left")]
    <l:EAExpr> "+" <r:EAExpr> => AExpr::binary(l, AOp::Plus, r),
    <l:EAExpr> "-" <r:EAExpr> => AExpr::binary(l, AOp::Minus, r),
};
EAExprBox: Box<AExpr> = EAExpr => Box::new(<>);

#[inline]
LTarget: Target<Box<AExpr>> = {
    LVariable => Target::Variable(<>),
    <arr:LArray> "[" <idx:EAExpr> "]" => Target::Array(arr, Box::new(idx)),
}
#[inline]
LVariable: Variable = LogicalVar => Variable(<>);
#[inline]
LArray: Array = LogicalVar => Array(<>);